#include <bits/stdc++.h>
//#include <unordered_map>

//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

#define rep(i,n) for(i=1;i<=n;i++)
#define Rep(i,n) for(i=0;i<n;i++)
#define For(i,a,b) for(i=a;i<=b;i++)

#define pb(x) push_back(x)
#define sz(x) (int)x.size()

#define mem(ara,val) memset(ara,val,sizeof(ara))
#define eps 1e-7

#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define sl(x) scanf("%lld",&x)
#define sll(x,y) scanf("%lld %lld",&x,&y)
#define slll(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define ss(str) scanf("%s",str)
#define pi(x) printf("%d",x)
//#define pii(x,y) printf("%d %d",x,y)
#define piii(x,y,z) printf("%d %d %d",x,y,z)
#define pl(x) printf("%lld",x)
#define pll(x,y) printf("%lld %lld",x,y)
#define plll(x,y,z) printf("%lld %lld %lld",x,y,z)
#define NL printf("\n")
#define Max (1<<16)+5
#define INF 1e18
#define un(x) x.erase(unique( x.begin() , x.end() ), x.end())
#define mod 30011

#define FI freopen("z.txt","r",stdin)

#define D(x) cout << #x << " = " << x << endl
#define DD(x,y) cout << #x << " = " << x << "   " << #y << " = " << y << endl
#define DDD(x,y,z) cout << #x << " = " << x << "   " << #y << " = " << y << "   " << #z << " = " << z << endl
#define all(x) x.begin(),x.end()
#define prntvctr(x) for(int i = 0; i < x.size(); i++) printf("%d%c", x[i], i + 1 == x.size() ? '\n' : ' ' );
#define pc(x) __builtin_popcount(x)

typedef long long LL;
typedef unsigned long long ULL;

const double PI = acos(-1.0);

using namespace std;

int setb(int n,int pos)
{
    return n=n | (1 << pos);
}
int resb(int n,int pos)
{
    return n=n & ~(1 << pos);
}
bool checkb(LL n,LL pos)
{
    return (bool)(n & (1ll << pos));
}

LL bigmod(LL b,LL p,LL m)
{
    if( p == 0 ) return 1;
    LL ret = bigmod(b,p/2,m);
    ret = ( ret * ret ) % m;
    if( p & 1 ) ret = ( ret * b ) % m;
    return ret;
}

#define MAX (1 << 16)
#define clr(ar) memset(ar, 0, sizeof(ar))
#define OR 0
#define AND 1
#define XOR 2

/// Fast Walsh-Hadamard Transformation in n log n
struct fwht /// hash = 840614
{
    long long P1[MAX], P2[MAX];

    void walsh_transform(long long* ar, int n, int flag = XOR)
    {
        if (n == 0) return;

        int i, m = n / 2;
        walsh_transform(ar, m, flag);
        walsh_transform(ar + m, m, flag);

        for (i = 0; i < m; i++)  /// Don't forget modulo if required
        {
            long long x = ar[i], y = ar[i + m];
            if (flag == OR) ar[i] = x, ar[i + m] = x + y;
            if (flag == AND) ar[i] = x + y, ar[i + m] = y;
            if (flag == XOR) ar[i] = x + y, ar[i + m] = x - y;
        }
    }

    void inverse_walsh_transform(long long* ar, int n, int flag = XOR)
    {
        if (n == 0) return;

        int i, m = n / 2;
        inverse_walsh_transform(ar, m, flag);
        inverse_walsh_transform(ar + m, m, flag);

        for (i = 0; i < m; i++)  /// Don't forget modulo if required
        {
            long long x = ar[i], y = ar[i + m];
            if (flag == OR) ar[i] = x, ar[i + m] = y - x;
            if (flag == AND) ar[i] = x - y, ar[i + m] = y;
            if (flag == XOR) ar[i] = (x + y) >> 1, ar[i + m] = (x - y) >> 1; /// Modular inverse if required here
        }
    }

    vector <long long> convolution(int n, long long* A, long long* B, int flag = XOR)
    {
        assert(__builtin_popcount(n) == 1); /// n must be a power of 2
        for (int i = 0; i < n; i++) P1[i] = A[i];
        for (int i = 0; i < n; i++) P2[i] = B[i];

        walsh_transform(P1, n, flag);
        walsh_transform(P2, n, flag);
        for (int i = 0; i < n; i++) P1[i] = P1[i] * P2[i];
        inverse_walsh_transform(P1, n, flag);
        for(int i = 0; i < n; i++) P1[i] %= mod;
        return vector<long long> (P1, P1 + n);
    }

    /// For i = 0 to n - 1, j = 0 to n - 1
    /// v[i or j] += A[i] * B[j]
    vector <long long> or_convolution(int n, long long* A, long long* B)
    {
        return convolution(n, A, B, OR);
    }

    /// For i = 0 to n - 1, j = 0 to n - 1
    /// v[i and j] += A[i] * B[j]
    vector <long long> and_convolution(int n, long long* A, long long* B)
    {
        return convolution(n, A, B, AND);
    }

    /// For i = 0 to n - 1, j = 0 to n - 1
    /// v[i xor j] += A[i] * B[j]
    vector <long long> xor_convolution(int n, long long* A, long long* B)
    {
        return convolution(n, A, B, XOR);
    }
};
fwht fft;
int n, k, limit;
LL A[MAX], B[MAX];
vector <LL> o;

vector <LL> multiply(vector <LL> v1, vector <LL> v2)
{
    for(int i = 0; i < limit; i++) A[i] = v1[i];
    for(int i = 0; i < limit; i++) B[i] = v2[i];
    return fft.xor_convolution(limit, A, B);
}

vector <LL> bigmod(int p)
{
    if( p == 1 ) return o;
    vector <LL> ret = bigmod(p/2);
    ret = multiply(ret, ret);
    if( p & 1 ) ret = multiply(ret, o);
    return ret;
}

int solve()
{
    vector <LL> v = bigmod(n);
    LL ret = 0;
    for(int i = 1; i < limit; i++) ret += v[i];
    return ret % mod;
}

int main()
{
    sii(n,k);
    for(int i = 0; ; i++)
    {
        if( (1 << i) > k )
        {
            limit = (1 << i);
            break;
        }
    }
    for(int i = 0; i <= k; i++) o.pb(1);
    for(int i = k + 1; i < limit; i++) o.pb( 0 );
    int ret = solve();
    pi(ret); NL;
    return 0;
}
